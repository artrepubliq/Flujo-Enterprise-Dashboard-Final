import { Component, OnInit, Inject } from '@angular/core';
import * as _ from 'underscore';
import { AppConstants } from '../app.constants';
import { HttpClient } from '@angular/common/http';
import { ICreateUserDetails } from '../model/createUser.model';

import { FormControl } from '@angular/forms';
import { Observable } from 'rxjs/Observable';
import { startWith } from 'rxjs/operators/startWith';
import { map } from 'rxjs/operators/map';
@Component({
    templateUrl: './manage-reports.component.html',
    styleUrls: ['./manage-reports.component.scss']

})
export class ManageReportsComponent implements OnInit {
    reportProblemData: Object;
    // loggedinUsersList: Array<ICreateUserDetails>;
    loggedinUsersList: Array<any>;
    postAssignedUsersObject: { client_id: string, Report_Issue_Id: string, Assigned_User_Id: string};
    postAssignedUserArray = [];
    myControl: FormControl = new FormControl();
    reportAssignedToUserName: string;
    options = [];
    filteredOptions: Observable<string[]>;
    constructor(public httpClient: HttpClient) {

    }
    ngOnInit() {
        this.getUserList()
            .subscribe(
            data => {
                this.loggedinUsersList = data;
                if (this.loggedinUsersList) {
                    _.each(this.loggedinUsersList, (iteratee) => {
                        this.options.push(iteratee.name);
                    });
                }
            },
            error => {
                console.log(error);
            }
            );
        this.filteredOptions = this.myControl.valueChanges.pipe(
            startWith(''),
            map(val => this.filter(val))
        );

        this.getAllReports();
    }
    filter = (val: string): string[] => {
        return this.options.filter(option => option.toLowerCase().indexOf(val.toLowerCase()) === 0);
    }

    AssignedUserName = (user) => {
        this.reportAssignedToUserName = user;
    }
    // this finction is  for to store the assigned user in database by calling http service
    updateAssignedUserIntoDB() {
        this.postAssignedUsersObject.Assigned_User_Id = '123';
        this.postAssignedUsersObject.client_id = AppConstants.CLIENT_ID;
        this.postAssignedUsersObject.Report_Issue_Id = '12345';
        this.postAssignedUserArray.push(this.postAssignedUsersObject);
        this.httpClient.post<Object>(AppConstants.API_URL + 'flujo_client_postreportassigned', this.postAssignedUserArray)
        .subscribe(
            resp => {
                console.log(resp);
            },
            error => {
                console.log(error);
            }
        );
    }
    // this function is used for getting reports data from the server
    getAllReports = () => {
        this.httpClient.get(AppConstants.API_URL + 'flujo_client_getreportproblem/' + AppConstants.CLIENT_ID)
            .subscribe(
            data => {
                this.reportProblemData = data;
                console.log(data);
            },
            error => {
                console.log(error);
            }
            );
    }
    // this function is used for getting all the users from the database
    getUserList = () => {
        // tslint:disable-next-line:max-line-length
        return this.httpClient.get<Array<ICreateUserDetails>>(AppConstants.API_URL + 'flujo_client_getcreateuser/' + AppConstants.CLIENT_ID);
    }
}
